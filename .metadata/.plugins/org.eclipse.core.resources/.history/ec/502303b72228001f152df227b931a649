package application;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Dialog;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Optional;
import java.util.Scanner;

import database.Database;
public class Main extends Application {
	private Database db;
	TextArea userinput;
	TextArea useroutput;
	TextArea leftTables;
	TextField leftSelect;
	TextArea leftPrintTable;
	@Override
	public void start(Stage stage) {
		try {
			db = new Database();
			db.init();
			BorderPane panel = new BorderPane(); 
		    setupTop(panel);
		    setupCenter(panel);
		    setupBottom(panel);
		    setupLeft(panel);
		    Scene scene = new Scene(panel); 
		    stage.setTitle("SQLJava"); 
	        stage.setScene(scene);
		    stage.show();  
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	private void update() {
		leftTables.setText(db.tableNames());
    	String result = "";
    	int count = Integer.parseInt(leftSelect.getText()) - 1;
        Scanner scanner = new Scanner(db.tableNames());
        while (scanner.hasNextLine()) {
        		if(count == 0) {
        			String table = scanner.nextLine();
        			table = (String) table.subSequence(3, table.length());
        			System.out.println(table);
        			leftPrintTable.setText(db.execute("SELECT * FROM " + table));
        		}else {
        			scanner.nextLine();
        		}
        		count--;
        }
        scanner.close();
	}
	private void setupLeft(BorderPane panel) {
		GridPane left = new GridPane();
		leftTables = new TextArea();
		leftTables.setPrefSize(200, 300);
		leftTables.setEditable(false);
		leftSelect = new TextField("1");
		leftSelect.setPrefSize(200, 30);
		leftPrintTable = new TextArea();
		leftPrintTable.setPrefSize(200, 300);
		leftPrintTable.setEditable(false);
		Button show = new Button("Show");
		left.add(leftTables, 0, 0);
		FlowPane pane = new FlowPane();
		pane.getChildren().add(leftSelect);
		pane.getChildren().add(show);
		left.add(pane, 0, 1);
		left.add(leftPrintTable, 0, 2);
		panel.setLeft(left);
	}
	private void setupBottom(BorderPane panel) {
		useroutput = new TextArea();
		useroutput.setEditable(false);
		HBox hbox = new HBox();
	    hbox.setSpacing(20);
	    hbox.setPadding(new Insets(20, 50, 50, 60));
	    hbox.getChildren().add(useroutput);
	    hbox.setAlignment(Pos.BOTTOM_RIGHT);
	    panel.setBottom(hbox);
	    
	}
	private void setupTop(BorderPane panel) {
		GridPane top = new GridPane();
		
		
		 Button detach = new Button("Detach");
			top.add(detach, 2, 1);
			EventHandler<ActionEvent> detachevent = new EventHandler<ActionEvent>() { 
	            public void handle(ActionEvent e) 
	            { 
	            	db.close();
	            	db.init();
	            	update();
	            } 
	        }; 
	        detach.setOnAction(detachevent); 
		
		
		Button opensql = new Button("Open SQL     ");
		top.add(opensql, 1, 1);
		EventHandler<ActionEvent> eventopensql = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
            	String path = openSQLDialog();
            	System.out.println(path);
            	db.close();
            	db.init();
            	try(BufferedReader br = new BufferedReader(new FileReader(path))) {
            	    for(String line; (line = br.readLine()) != null; ) {
            	        db.execute(line);
            	    }
            	} catch (FileNotFoundException e1) {
					e1.printStackTrace();
				} catch (IOException e1) {
					e1.printStackTrace();
				} 
            	update();
            } 
        }; 
        opensql.setOnAction(eventopensql); 
		
        Button closesql = new Button("Save SQL     ");
		top.add(closesql, 0, 1);
		EventHandler<ActionEvent> eventSQLclose = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
            	String path = customSaveDialog();
            	if(path != "")db.save_sql(path);
            	update();
            } 
        }; 
        closesql.setOnAction(eventSQLclose); 
		
		
		Button open = new Button("Open custom");
		top.add(open, 1, 0);
		EventHandler<ActionEvent> eventopen = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
            	String path = openDialog();
            	System.out.println(path);
            	db.close();
            	db.init();
            	System.out.println(db.load(path));
            	update();
            } 
        }; 
        open.setOnAction(eventopen); 
		
        Button close = new Button("Save custom");
		top.add(close, 0, 0);
		EventHandler<ActionEvent> eventclose = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
            	String path = customSaveDialog();
            	if(path != "")db.save(path);
            	update();
            } 
        }; 
        close.setOnAction(eventclose); 
		
		Button execute = new Button("Execute");
		top.add(execute, 2, 0);
		EventHandler<ActionEvent> event = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
            	String result = "";
                Scanner scanner = new Scanner(userinput.getText());
                while (scanner.hasNextLine()) {
                		result += db.execute(scanner.nextLine()) + "\n";
                }
                scanner.close();
                useroutput.setText(result);
                update();
            } 
        }; 
        execute.setOnAction(event); 
        
		Button print = new Button("Print");
		top.add(print, 3, 0);
		EventHandler<ActionEvent> printevent = new EventHandler<ActionEvent>() { 
            public void handle(ActionEvent e) 
            { 
                useroutput.setText(db.printTable());
                update();
            } 
        }; 
        print.setOnAction(printevent); 
        panel.setTop(top);
	}
	private void setupCenter(BorderPane panel) {
		userinput = new TextArea("Create table Grikom (Radnik, Vozilo, Plata);\r\n"
				+ "INSERT INTO Grikom (Radnik, Vozilo, Plata) VALUES ('Aca', 'Mikser', '100k');\r\n"
				+ "Select * FROM Grikom");
		HBox hbox = new HBox();
	    hbox.setSpacing(20);
	    hbox.setPadding(new Insets(20, 50, 50, 60));
	    hbox.getChildren().add(userinput);
	    //userinput.setPrefSize(800, 800);
	    panel.setCenter(hbox);
	}
	public String openSQLDialog() {
		TextInputDialog dialog = new TextInputDialog();
		dialog.setTitle("Open");
		dialog.setHeaderText("Example: myDatabase.sql");
		dialog.setContentText("Enter full database name:");

		Optional<String> result = dialog.showAndWait();
		if (result.isPresent()){
		    return result.get();
		}
		return "";
	}
	public String openDialog() {
		TextInputDialog dialog = new TextInputDialog();
		dialog.setTitle("Open");
		dialog.setHeaderText("Example: myDatabase.sqlpp");
		dialog.setContentText("Enter full database name:");

		Optional<String> result = dialog.showAndWait();
		if (result.isPresent()){
		    return result.get();
		}
		return "";
	}
	public String customSaveDialog() {
		TextInputDialog dialog = new TextInputDialog();
		dialog.setTitle("Save");
		dialog.setHeaderText("Save Database");
		dialog.setContentText("Save as (without extension):");

		Optional<String> result = dialog.showAndWait();
		if (result.isPresent()){
		    return result.get();
		}
		return "";
	}
	
	public static void main(String[] args) {
		launch(args);
	}
}
